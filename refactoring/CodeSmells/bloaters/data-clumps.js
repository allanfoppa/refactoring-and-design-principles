// NOTE: INITIAL CODE GENERATED BY AI AND REFACTORED BY ME

// Before Refactoring: Data Clumps Example
function connectToDatabase(host, port, username, password) {
    console.log(`Connecting to database at ${host}:${port} with user ${username}`);
}

function logDatabaseConnection(host, port, username, password) {
    console.log(`Logging connection to ${host}:${port} for user ${username}`);
}

connectToDatabase('localhost', 5432, 'admin', 'password123');
logDatabaseConnection('localhost', 5432, 'admin', 'password123');

// After Refactoring: Extracting Data Clumps into a Class
function connectToDatabaseRefactored(config) {
    // Logic to connect to the database
    console.log(`Connecting to database at ${config.host}:${config.port} with user ${config.username}`);
}

function logDatabaseConnectionRefactored(config) {
    // Logic to log the database connection
    console.log(`Logging connection to ${config.host}:${config.port} for user ${config.username}`);
}

class DatabaseConfig {
    constructor(host, port, username, password) {
        this.host = host;
        this.port = port;
        this.username = username;
        this.password = password;
        this.validate();
    }

    validate() {
        // Logic to validate the database configuration
        if (!this.host || !this.port || !this.username || !this.password) {
            throw new Error('Invalid database configuration');
        }
    }
}

// dbConfig is a good approach turned into a class because it encapsulates the database connection parameters
// and makes it easier to pass around as a single object and validate the data.
const dbConfig = new DatabaseConfig('localhost', 5432, 'admin', 'password123'); // Will be used in both functions reducing duplication
connectToDatabaseRefactored(dbConfig);
logDatabaseConnectionRefactored(dbConfig);

// FINAL NOTE:
// - The refactored code uses a class to encapsulate the database connection parameters.
// - This makes the code cleaner and easier to reuse and reduce duplication.