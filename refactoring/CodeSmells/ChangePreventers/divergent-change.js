// NOTE: EXAMPLE GENERATED BY AI AND REFACTORED BY ME

// Before Refactoring: Divergent Change
// This class handles multiple unrelated responsibilities: finding, displaying, and ordering products.
class ProductManager {
  constructor(products) {
    this.products = products;
  }

  findProductById(id) {
    return this.products.find((product) => product.id === id);
  }

  displayProductDetails(product) {
    console.log(`Product: ${product.name}, Price: ${product.price}`);
  }

  orderProduct(product, quantity) {
    console.log(`Ordered ${quantity} of ${product.name}`);
  }
}

// Example usage
const productsBefore = [
  { id: 1, name: "Laptop", price: 1000 },
  { id: 2, name: "Phone", price: 500 },
];

const productManager = new ProductManager(productsBefore);
const productBefore = productManager.findProductById(1);
productManager.displayProductDetails(productBefore);
productManager.orderProduct(productBefore, 2);

// After Refactoring: Separation of Concerns
// Split the responsibilities into separate classes for better maintainability and single responsibility.

class ProductFinder {
  constructor(products) {
    this.products = products;
  }

  findProductById(id) {
    return this.products.find((product) => product.id === id);
  }
}

class ProductDisplayer {
  displayProductDetails(product) {
    console.log(`Product: ${product.name}, Price: ${product.price}`);
  }
}

class ProductOrderer {
  orderProduct(product, quantity) {
    console.log(`Ordered ${quantity} of ${product.name}`);
  }
}

// Example usage
const products = [
  { id: 1, name: "Laptop", price: 1000 },
  { id: 2, name: "Phone", price: 500 },
];

const productFinder = new ProductFinder(products);
const productDisplayer = new ProductDisplayer();
const productOrderer = new ProductOrderer();

const product = productFinder.findProductById(1);
productDisplayer.displayProductDetails(product);
productOrderer.orderProduct(product, 2);
