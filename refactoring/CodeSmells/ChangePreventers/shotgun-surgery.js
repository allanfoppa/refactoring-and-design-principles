// NOTE: EXAMPLE GENERATED BY AI

// Example of Shotgun Surgery

// Before Refactoring: A single responsibility (logging user activity) is spread across multiple classes.
class UserService {
  updateUser(user) {
    // Update user logic
    console.log(`User ${user.name} updated`);
  }
}

class OrderService {
  createOrder(order) {
    // Create order logic
    console.log(`Order ${order.id} created`);
  }
}

class NotificationService {
  sendNotification(notification) {
    // Send notification logic
    console.log(`Notification sent: ${notification.message}`);
  }
}

// After Refactoring: Consolidate the logging responsibility into a single class.
// appropriate for this
class Logger {
  log(message) {
    console.log(message);
  }
}

class UserServiceRefactored {
  constructor(logger) {
    this.logger = logger;
  }

  updateUser(user) {
    // Update user logic
    this.logger.log(`User ${user.name} updated`);
  }
}

class OrderServiceRefactored {
  constructor(logger) {
    this.logger = logger;
  }

  createOrder(order) {
    // Create order logic
    this.logger.log(`Order ${order.id} created`);
  }
}

class NotificationServiceRefactored {
  constructor(logger) {
    this.logger = logger;
  }

  sendNotification(notification) {
    // Send notification logic
    this.logger.log(`Notification sent: ${notification.message}`);
  }
}

// Usage
const logger = new Logger();
const userService = new UserServiceRefactored(logger);
const orderService = new OrderServiceRefactored(logger);
const notificationService = new NotificationServiceRefactored(logger);

userService.updateUser({ name: "Allan" });
orderService.createOrder({ id: 123 });
notificationService.sendNotification({ message: "Welcome!" });
