// NOTE: CODE GENERATED BY AI

// Before Refactoring: Primitive Obsession
const USER_ADMIN_ROLE = 1;
const USER_EDITOR_ROLE = 2;

function createUser(name, role) {
    return {
        name,
        role,
    };
}

function isAdmin(user) {
    return user.role === USER_ADMIN_ROLE;
}

const user = createUser("Alice", USER_ADMIN_ROLE);
console.log(isAdmin(user)); // true

// After Refactoring: Replace Primitive with Object
class Role {
    static ADMIN = new Role("Admin");
    static EDITOR = new Role("Editor");

    constructor(name) {
        this.name = name;
    }

    toString() {
        return this.name;
    }
}

class User {
    constructor(name, role) {
        this.name = name;
        this.role = role;
    }

    isAdmin() {
        return this.role === Role.ADMIN;
    }
}

const userRefactored = new User("Alice", Role.ADMIN);
console.log(userRefactored.isAdmin()); // true

// FINAL NOTE:
// - The refactored code uses an object to represent the role, which makes it easier to extend in the future if needed.