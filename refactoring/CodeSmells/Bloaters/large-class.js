// NOTE: INITIAL CODE GENERATED BY AI

// Before Refactoring: Large Class Example
class LargeClass {
    constructor(name, age, address, phoneNumber, email) {
        this.name = name;
        this.age = age;
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.email = email;
    }

    // Personal Information Methods
    getName() {
        return this.name;
    }

    getAge() {
        return this.age;
    }

    // Contact Information Methods
    getAddress() {
        return this.address;
    }

    getPhoneNumber() {
        return this.phoneNumber;
    }

    getEmail() {
        return this.email;
    }

    // Business Logic Methods
    isAdult() {
        return this.age >= 18;
    }

    contactInfo() {
        return `${this.name} can be reached at ${this.phoneNumber} or ${this.email}`;
    }
}

// After Refactoring: Extracting Smaller Classes
class PersonalInfo {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }

    getName() {
        return this.name;
    }

    getAge() {
        return this.age;
    }

    isAdult() {
        return this.age >= 18;
    }
}

class ContactInfo {
    constructor(address, phoneNumber, email) {
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.email = email;
    }

    getAddress() {
        return this.address;
    }

    getPhoneNumber() {
        return this.phoneNumber;
    }

    getEmail() {
        return this.email;
    }

    contactInfo(name) {
        return `${name} can be reached at ${this.phoneNumber} or ${this.email}`;
    }
}

// Usage
const personalInfo = new PersonalInfo("John Doe", 25);
const contactInfo = new ContactInfo("123 Main St", "555-1234", "john.doe@example.com");

console.log(personalInfo.getName()); // John Doe
console.log(personalInfo.isAdult()); // true
console.log(contactInfo.contactInfo(personalInfo.getName())); // John Doe can be reached at 555-1234 or john.doe@example.com

// FINAL NOTE:
// - The refactored code separates concerns into smaller classes, making it easier to manage and understand.
// - Each class has a single responsibility, which adheres to the Single Responsibility Principle (SRP).