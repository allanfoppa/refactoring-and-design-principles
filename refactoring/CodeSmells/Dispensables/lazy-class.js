// NOTE: EXAMPLE GENERATED BY AI AND MODIFIED BY ME

// Before refactoring: Lazy Class Example
class AddressBefore {
  constructor(city, country) {
    this.city = city;
    this.country = country;
  }

  getFullAddress() {
    return `${this.city}, ${this.country}`;
  }
}

class IsAdult {
  constructor(age) {
    this.age = age;
  }

  isAdult() {
    return this.age >= 18;
  }
}

class PersonBefore {
  constructor(name, address) {
    this.name = name;
    this.address = address;
  }

  getPersonDetails() {
    return `${this.name} lives at ${this.address.getFullAddress()}`;
  }
}

const address = new AddressBefore("Porto Alegre", "Brazil");
const personBefore = new PersonBefore("Allan Foppa", address);
console.log("Before refactoring", personBefore.getPersonDetails());

// After refactoring: Inline Class Example
class Address {
  constructor(city, country) {
    this.city = city;
    this.country = country;
  }

  getFullAddress() {
    return `${this.city}, ${this.country}`;
  }
}

class Person {
  constructor(name, age, city, country) {
    this.name = name;
    this.age = age;
    // Not considered a lazy class
    this.address = new Address(city, country);
  }

  getPersonDetails() {
    return `${this.name} lives at ${this.address.getFullAddress()}`;
  }

  // Inline the isAdult method
  isAdult() {
    return this.age >= 18;
  }
}

const person = new Person("Allan Foppa", 39, "Porto Alegre", "Brazil");
console.log("After refactoring", person.getPersonDetails());


