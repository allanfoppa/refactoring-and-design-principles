// NOTE: EXAMPLE GENERATED BY AI

// Before: Method names are unclear, requiring comments to explain their purpose
class Order {
  // Calculates the total price of items in the order
  calc() {
    return this.items.reduce((total, item) => total + item.price, 0);
  }

  // Checks if the order qualifies for free shipping
  fsCheck() {
    return this.calc() > 50;
  }
}

// After: Renamed methods to make their purpose clear, eliminating the need for comments
class Order {
  calculateTotalPrice() {
    return this.items.reduce((total, item) => total + item.price, 0);
  }

  qualifiesForFreeShipping() {
    return this.calculateTotalPrice() > 50;
  }
}

// Before: Comments explain what the method does
class User {
  // Gets the user's full name
  getName() {
    return `${this.firstName} ${this.lastName}`;
  }

  // Checks if the user is an admin
  isAdm() {
    return this.role === "admin";
  }
}

// After: Renamed methods to make their purpose self-explanatory
class User {
  getFullName() {
    return `${this.firstName} ${this.lastName}`;
  }

  isAdmin() {
    return this.role === "admin";
  }
}

// Before: Comments explain the parameters
class Product {
  // Applies a discount to the product price
  // @param d - The discount percentage
  applyDisc(d) {
    this.price -= this.price * (d / 100);
  }
}

// After: Renamed method and parameter for clarity
class Product {
  applyDiscount(discountPercentage) {
    this.price -= this.price * (discountPercentage / 100);
  }
}
