// NOTE: EXAMPLE GENERATED BY AI AND REFACTORED BY ME

// Before Refactoring: Temporary Field
class Order {
    constructor() {
        this.discountRate = null; // Temporary field
        this.discountThreshold = null; // Temporary field
        this.discountAmount = null; // Temporary field
    }

    calculateDiscount(totalAmount) {
        if (this.discountRate === null || this.discountThreshold === null) {
            return 0; // No discount applied
        }

        if (totalAmount > this.discountThreshold) {
            this.discountAmount = totalAmount * this.discountRate;
            return this.discountAmount;
        }

        return 0;
    }
}

// Example usage
const order = new Order();
order.discountRate = 0.1;
order.discountThreshold = 100;

console.log(order.calculateDiscount(150)); // Outputs: 15
console.log(order.calculateDiscount(50));  // Outputs: 0

// After Refactoring: Remove Temporary Field
// Extracted DiscountPolicy class
class DiscountPolicy {
    constructor(rate = null, threshold = null) {
        this.rate = rate;
        this.threshold = threshold;
    }

    calculateDiscount(totalAmount) {
        if (this.rate === null || this.threshold === null) {
            return 0; // No discount applied
        }

        if (totalAmount > this.threshold) {
            return totalAmount * this.rate;
        }

        return 0;
    }
}

// Refactored Order class
class Order {
    constructor() {
        // The discount policy is now a separate class
        // and discountRate and discountThreshold are not temporary fields anymore
        this.discountPolicy = new DiscountPolicy();
    }

    setDiscountPolicy(rate, threshold) {
        this.discountPolicy.rate = rate;
        this.discountPolicy.threshold = threshold;
    }

    calculateDiscount(totalAmount) {
        return this.discountPolicy.calculateDiscount(totalAmount);
    }
}

// Example usage
const order = new Order();
order.setDiscountPolicy(0.1, 100);

console.log(order.calculateDiscount(150)); // Outputs: 15
console.log(order.calculateDiscount(50));  // Outputs: 0