// NOTE: EXAMPLE GENERATED BY AI AND REFACTORED BY ME

// Before Refactoring: Refused Bequest
// This code demonstrates a case where a subclass inherits methods that it doesn't need.
// Parent class
class AnimalBefore {
  eat() {
    console.log("Eating...");
  }

  sleep() {
    console.log("Sleeping...");
  }

  fly() {
    console.log("Flying...");
  }
}

// Subclass that doesn't need the fly method
class DogBefore extends AnimalBefore {
  bark() {
    console.log("Barking...");
  }

  fly() {
    throw new Error("Dogs can't fly!");
  }
}

// Usage
const dogBefore = new DogBefore();
dogBefore.eat(); // Eating...
dogBefore.bark(); // Barking...
dogBefore.fly(); // Error: Dogs can't fly!

// After Refactoring: Refused Bequest
// Abstract superclass
class Animal {
    eat() {
        console.log("Eating...");
    }

    sleep() {
        console.log("Sleeping...");
    }
}

// Subclass for animals that can fly
class Bird extends Animal {
    fly() {
        console.log("Flying...");
    }
}

// Subclass for animals that can't fly
class Dog extends Animal {
    bark() {
        console.log("Barking...");
    }
}

// Usage
const dog = new Dog();
dog.eat(); // Eating...
dog.bark(); // Barking...

const bird = new Bird();
bird.eat(); // Eating...
bird.fly(); // Flying...

