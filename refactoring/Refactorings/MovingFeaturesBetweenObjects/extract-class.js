// NOTE: CODE GENERATED BY AI

/*
Extract Class Refactoring Example

Problem:
A single class is handling too many responsibilities.

Below is the code BEFORE and AFTER applying the Extract Class refactoring.
*/

// =====================
// BEFORE REFACTORING
// =====================

class Person {
  constructor(name, street, city, zip) {
    this._name = name;
    this._street = street;
    this._city = city;
    this._zip = zip;
  }

  get name() {
    return this._name;
  }

  get street() {
    return this._street;
  }

  get city() {
    return this._city;
  }

  get zip() {
    return this._zip;
  }

  get address() {
    return `${this._street}, ${this._city}, ${this._zip}`;
  }
}

// Usage
const person = new Person("Allan", "123 Main St", "Springfield", "12345");
console.log(person.name); // Allan
console.log(person.address); // 123 Main St, Springfield, 12345

// =====================
// AFTER REFACTORING
// =====================

class Address {
  constructor(street, city, zip) {
    this._street = street;
    this._city = city;
    this._zip = zip;
  }

  get street() {
    return this._street;
  }

  get city() {
    return this._city;
  }

  get zip() {
    return this._zip;
  }

  toString() {
    return `${this._street}, ${this._city}, ${this._zip}`;
  }
}

class PersonRefactored {
  constructor(name, address) {
    this._name = name;
    this._address = address;
  }

  get name() {
    return this._name;
  }

  get address() {
    return this._address.toString();
  }
}

// Usage
const address = new Address("123 Main St", "Springfield", "12345");
const person2 = new PersonRefactored("Allan", address);
console.log(person2.name); // Allan
console.log(person2.address); // 123 Main St, Springfield, 12345
