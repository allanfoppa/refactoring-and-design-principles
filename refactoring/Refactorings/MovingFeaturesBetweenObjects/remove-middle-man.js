// NOTE: CODE GENERATED BY AI

/*
Remove Middle Man - Before
--------------------------
In this example, the Person class acts as a "middle man" by delegating calls to the Department class.
*/

class Department {
  constructor(manager) {
    this._manager = manager;
  }
  get manager() {
    return this._manager;
  }
}

class Person {
  constructor(name, department) {
    this._name = name;
    this._department = department;
  }
  get manager() {
    // Delegates to Department
    return this._department.manager;
  }
}

const department = new Department("Alice");
const person = new Person("Bob", department);

// Client code:
console.log(person.manager); // "Alice"

/*
Remove Middle Man - After
-------------------------
The delegating method is removed from Person. Clients access the delegate (Department) directly.
*/

class Department {
  constructor(manager) {
    this._manager = manager;
  }
  get manager() {
    return this._manager;
  }
}

class Person {
  constructor(name, department) {
    this._name = name;
    this._department = department;
  }
  get department() {
    return this._department;
  }
}

const department2 = new Department("Carol");
const person2 = new Person("Dave", department2);

// Client code now accesses the delegate directly:
console.log(person2.department.manager); // "Carol"
