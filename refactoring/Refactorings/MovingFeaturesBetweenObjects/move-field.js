// NOTE: CODE GENERATED BY AI

// Before Refactoring
// Customer class holds wrongly the discountRate field and logic for applying discount
class Customer {
    constructor(name, discountRate) {
        this.name = name;
        this.discountRate = discountRate; // Discount rate is stored in Customer
    }

    // Applies the customer's discount rate to a given amount
    applyDiscount(amount) {
        return amount - (amount * this.discountRate);
    }
}

// Order class references a Customer and uses its discount logic
class Order {
    constructor(customer, amount) {
        this.customer = customer;
        this.amount = amount;
    }

    // Calculates the final amount using the customer's discount
    finalAmount() {
        return this.customer.applyDiscount(this.amount);
    }
}

// Usage example for original design
const customer = new Customer('Alice', 0.1);
const order = new Order(customer, 100);
console.log(order.finalAmount()); // Output: 90



// After Refactoring
// CustomerRefactored no longer holds discountRate
class CustomerRefactored {
    constructor(name) {
        this.name = name;
    }
}

// OrderRefactored now owns the discountRate and discount logic
class OrderRefactored {
    constructor(customer, amount, discountRate) {
        this.customer = customer;
        this.amount = amount;
        this.discountRate = discountRate; // Discount rate moved to Order
    }

    // Applies the order's discount rate to a given amount
    applyDiscount(amount) {
        return amount - (amount * this.discountRate);
    }

    // Calculates the final amount using its own discount logic
    finalAmount() {
        return this.applyDiscount(this.amount);
    }
}

// Usage example for refactored design
const customer2 = new CustomerRefactored("Alice");
const order2 = new OrderRefactored(customer2, 100, 0.1);
console.log(order2.finalAmount()); // Output: 90
