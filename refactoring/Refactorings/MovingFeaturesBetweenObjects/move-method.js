// NOTE: CODE GENERATED BY AI

// Move Method - Before Refactoring

class Account {
  constructor(number, customer) {
    this.number = number;
    this.customer = customer; // Customer object
  }

  // This method uses more data from Customer than Account
  getCustomerFullName() {
    return `${this.customer.firstName} ${this.customer.lastName}`;
  }
}

class Customer {
  constructor(firstName, lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }
}

// Usage
const customer = new Customer("John", "Doe");
const account = new Account("12345", customer);
console.log(account.getCustomerFullName()); // John Doe

// ------------------------------------------------------------

// Move Method - After Refactoring

class AccountRefactored {
  constructor(number, customer) {
    this.number = number;
    this.customer = customer; // CustomerRefactored object
  }

  // The method is removed or delegated
  getCustomerFullName() {
    return this.customer.getFullName();
  }
}

class CustomerRefactored {
  constructor(firstName, lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }

  // METHOD MOVED HERE, WHERE THE DATA LIVES
  getFullName() {
    return `${this.firstName} ${this.lastName}`;
  }
}

// Usage
const customer2 = new CustomerRefactored("Jane", "Smith");
const account2 = new AccountRefactored("67890", customer2);
console.log(account2.getCustomerFullName()); // Jane Smith

// FINAL NOTE:
// - The method getCustomerFullName was moved from Account to Customer, where the data lives.
// - The method is now more cohesive with the Customer class, which is responsible for customer-related data and behavior.