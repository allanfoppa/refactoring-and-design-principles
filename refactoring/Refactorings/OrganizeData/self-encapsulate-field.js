// NOTE: CODE GENERATED BY AI

/*
    Example: Self Encapsulate Field Refactoring

    BEFORE REFACTORING:
    Direct access to private fields inside the class.
*/

class Range {
  #low;
  #high;
  constructor(low, high) {
    this.#low = low;
    this.#high = high;
  }
  includes(arg) {
    return arg >= this.#low && arg <= this.#high;
  }
  // ... other methods that directly access #low or #high
}

/*
    AFTER REFACTORING:
    All access to the private fields is done via getter and setter methods.
*/

class Range {
  #low;
  #high;
  constructor(low, high) {
    this.#low = low;
    this.#high = high;
  }
  getLow() {
    return this.#low;
  }
  setLow(value) {
    this.#low = value;
  }
  getHigh() {
    return this.#high;
  }
  setHigh(value) {
    this.#high = value;
  }
  includes(arg) {
    return arg >= this.getLow() && arg <= this.getHigh();
  }
  // ... other methods now use getLow()/setLow() and getHigh()/setHigh()
}

// FINAL NOTE:
// This refactoring helps to encapsulate the fields better, allowing for future changes to the fields without affecting the rest of the class.